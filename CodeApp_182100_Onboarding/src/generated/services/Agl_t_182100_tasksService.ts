/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import { dataSourcesInfo } from '../../../.power/appschemas/dataSourcesInfo';
import type { IOperationResult } from '@microsoft/power-apps/data';
import { getClient } from '@microsoft/power-apps/data';
import type { IGetOptions, IGetAllOptions } from '../models/CommonModels';
import type { Agl_t_182100_tasks } from '../models/Agl_t_182100_tasksModel';

export class Agl_t_182100_tasksService {
  private static readonly dataSourceName = '_182100_Tasks';

  private static readonly client = getClient(dataSourcesInfo);

  public static async create(record: Omit<Agl_t_182100_tasks, 'agl_t_182100_taskid'>): Promise<IOperationResult<Agl_t_182100_tasks>> {
    const result = await Agl_t_182100_tasksService.client.createRecordAsync<Omit<Agl_t_182100_tasks, 'agl_t_182100_taskid'>, Agl_t_182100_tasks>(
      Agl_t_182100_tasksService.dataSourceName,
      record
    );
    return result;
  }

  public static async update(id: string, changedFields: Partial<Omit<Agl_t_182100_tasks, 'agl_t_182100_taskid'>>): Promise<IOperationResult<Agl_t_182100_tasks>> {
    const result = await Agl_t_182100_tasksService.client.updateRecordAsync<Partial<Omit<Agl_t_182100_tasks, 'agl_t_182100_taskid'>>, Agl_t_182100_tasks>(
      Agl_t_182100_tasksService.dataSourceName,
      id.toString(),
      changedFields
    );
    return result;
  }

  public static async delete(id: string): Promise<void> {
    await Agl_t_182100_tasksService.client.deleteRecordAsync(
      Agl_t_182100_tasksService.dataSourceName,
      id.toString());
  }

  public static async get(id: string, options?: IGetOptions): Promise<IOperationResult<Agl_t_182100_tasks>> {
    const result = await Agl_t_182100_tasksService.client.retrieveRecordAsync<Agl_t_182100_tasks>(
      Agl_t_182100_tasksService.dataSourceName,
      id.toString(),
      options
    );
    return result;
  }

  public static async getAll(options?: IGetAllOptions): Promise<IOperationResult<Agl_t_182100_tasks[]>> {
    const result = await Agl_t_182100_tasksService.client.retrieveMultipleRecordsAsync<Agl_t_182100_tasks>(
      Agl_t_182100_tasksService.dataSourceName,
      options
    );
    return result;
  }
}
